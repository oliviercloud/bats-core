#!/usr/bin/env bash
set -e

index=0

init_suite() {
  count=0
  failures=0
  skipped=0
  suitetest_exec_time=0
  name=""
  _buffer=""
}

host() {
  hostname="$HOST"
  [[ -z "$hostname" ]] && hostname="$HOSTNAME"
  [[ -z "$hostname" ]] && hostname="$(uname -n)"
  [[ -z "$hostname" ]] && hostname="$(hostname -f)"

  echo "$hostname"
}

header() {
    timestamp=$(date -u +"%Y-%m-%dT%H:%M:%S")

    printf "\
<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<testsuite name=\"${class}\" tests=\"${count}\" failures=\"${failures}\" errors=\"0\" skipped=\"${skipped}\" time=\"${suitetest_exec_time}\" timestamp=\"${timestamp}\" hostname=\"$(host)\">
  <properties>"
    while IFS= read -r line; do
      name="$(echo "$line" | cut -d'=' -f1)"
      value="$(echo "$line" | cut -d'=' -f2-)"
      if echo "$name" | grep -qv "^BATS_"; then
        continue
      fi
      printf "\n    <property name=\"${name}\" value=\"${value}\"/>"
    done < <(env)
    printf "\n  </properties>"
}

footer() {
    printf "  <system-out></system-out>\n"
    printf "  <system-err></system-err>\n"
    printf "</testsuite>\n"
}


pass() {
    printf "\n    <testcase classname=\"${class}\" name=\"${name}\" time=\"${test_exec_time}\"/>"
}

fail() {
    printf "\n    <testcase classname=\"${class}\" name=\"${name}\" time=\"${test_exec_time}\">
        <failure type=\"unknown\"><![CDATA["

    echo -n "${1}"

    printf "]]></failure>
    </testcase>\n"
}

skip() {
    printf "\n    <testcase classname=\"${class}\" name=\"${name}\" time=\"${test_exec_time}\">
        <skipped>$1</skipped>
    </testcase>\n"
}

buffer() {
  _buffer="${_buffer}$("$@")"
}

flush() {
  echo "${_buffer}"
  _buffer=""
}

_buffer_log=""
log() {
  _buffer_log="${_buffer_log}
$1"
}

flush_log() {
  if [[ -n "${_buffer_log}" ]]; then
    buffer fail "${_buffer_log}"
    _buffer_log=""
  fi
}

finish_suite() {
  [[ ${count} -gt 0 ]] && {
  local out_path=$(output_path)
    install -D /dev/null "${out_path}"
    (
      flush_log
      header
      flush
      footer
    ) > "${out_path}"
  }
  init_suite
}

output_path() {
  path='Test-report.xml'
  if [[ -n "${class}" ]]; then
    path="${class}.xml"
  fi  

  if [[ -n "$BATS_REPORT_OUTPUT_PATH" ]]; then
    path="${BATS_REPORT_OUTPUT_PATH%/}/${path}"
  fi
  
  echo $path
}

trap finish_suite EXIT

while IFS= read -r line; do
  case "$line" in
  "suite "*)
    flush_log
    finish_suite
    suite_expr="suite (.*)"
    if [[ "$line" =~ $suite_expr ]]; then
      class="${BASH_REMATCH[1]}"
    fi
    ;;
  "begin "* )
    flush_log
    let index+=1
    name="${line#* $index }"
    ;;
  "ok "* )
    echo "$line"
    let count+=1
    expr_ok="ok $index .* in ([0-9]+)sec"
    expr_skip="ok $index .* # skip (.*)"
    if [[ "$line" =~ $expr_skip ]]; then
      let skipped+=1
      test_exec_time=0
      buffer skip "${BASH_REMATCH[1]}"
    elif [[ "$line" =~ $expr_ok ]]; then
      test_exec_time="${BASH_REMATCH[1]}"
      suitetest_exec_time=$((suitetest_exec_time + test_exec_time))
      buffer pass
    else
      log "Wrong output format: ${line}"
      let failures+=1
    fi
    ;;
  "not ok "* )
    echo "$line"
    let count+=1
    let failures+=1
    expr_notok="not ok $index .* in ([0-9]+)sec"
    if [[ "$line" =~ $expr_notok ]]; then
      test_exec_time="${BASH_REMATCH[1]}"
      suitetest_exec_time=$((suitetest_exec_time + test_exec_time))
    fi
    ;;
  "# "* )
    log "${line:2}"
    ;;
  *)
    echo "$line"
    ;;
  esac
done
